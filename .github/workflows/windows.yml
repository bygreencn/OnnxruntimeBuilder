name: windows

on:
  workflow_dispatch:
    inputs:
      win_ver:
        description: 'windows version(almost same as visual studio version). From onnx v 1.16.0, not support vs 2019'
        default: 2022
        required: true
        type: choice
        options:
          - 2022
          - 2019
      onnx_tags:
        description: 'tags of onnxruntime, such as v1.19.0'
        default: v1.14.1
        required: true
        type: choice
        options:
          - v1.19.0
          - v1.18.1
          - v1.18.0
          - v1.17.3
          - v1.17.1
          - v1.17.0
          - v1.16.3
          - v1.16.2
          - v1.16.1
          - v1.16.0
          - v1.15.1
          - v1.15.0
          - v1.14.1
          - v1.14.0
          - v1.13.1
          - v1.12.1
          - v1.12.0
          - v1.11.1
          - v1.11.0
          - v1.10.0
      windows_SDK_ver:
        description: 'windows 10 SDK version'
        default: 19041
        required: true
        type: choice
        options:
          - 19041
          - 20348
          - 22000
          - 22621
          - 26100
      python_version:
        description: 'version of python, such as 3.8.10'
        default: '3.8.10'
        required: false
        type: string

jobs:
  parse-windows-version-to-array:
    runs-on: ubuntu-latest
    steps:
    - name: parse windows version
      id: parse-windows-version
      run: |
        python -c "print('win_ver=' + str('${{ github.event.inputs.win_ver }}'.split()))" >> $GITHUB_OUTPUT
    outputs:
      win_ver: ${{ steps.parse-windows-version.outputs.win_ver }}
  Build:
    needs: parse-windows-version-to-array
    strategy:
      fail-fast: false
      matrix:
        win_ver: ${{ fromJSON(needs.parse-windows-version-to-array.outputs.win_ver) }}
        host_arch:
          [
            x64,
            #x86,
          ]
        arch:
          [
            x64,
            #x86,
            #arm64,
            #arm64ec,
          ]
        crt:
          [
            md,
            mt,
          ]

    runs-on: windows-${{ matrix.win_ver }}
    name: windows-${{ matrix.win_ver }}-${{ matrix.host_arch }}-${{ matrix.arch }}-${{ matrix.crt }}

    env:
      BUILD_SCRIPT: build-onnxruntime-win.ps1
      PKG_TAG: ${{ github.event.inputs.onnx_tags }}
      SHARED_PKG_NAME: onnxruntime-${{ github.event.inputs.onnx_tags }}-windows-${{ matrix.win_ver }}-${{ github.event.inputs.windows_SDK_ver }}-${{ matrix.host_arch }}-${{ matrix.arch }}-shared-${{ matrix.crt }}
      STATIC_PKG_NAME: onnxruntime-${{ github.event.inputs.onnx_tags }}-windows-${{ matrix.win_ver }}-${{ github.event.inputs.windows_SDK_ver }}-${{ matrix.host_arch }}-${{ matrix.arch }}-static-${{ matrix.crt }}

    steps:
      - uses: actions/checkout@v4
      - uses: GuillaumeFalourd/setup-windows10-sdk-action@v2
        with:
          sdk-version: ${{ github.event.inputs.windows_SDK_ver }}
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.host_arch }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '${{ github.event.inputs.python_version }}'


      - name: checkout onnxruntime
        uses: actions/checkout@v4
        with:
          repository: microsoft/onnxruntime
          path: onnxruntime-${{ github.event.inputs.onnx_tags }}
          ref: ${{ github.event.inputs.onnx_tags }}
          submodules: recursive

      #- name: copy Launch-VsDevShell.ps1 to identify vs version
      - name: Copy build script
        run: |
          cp ${{ env.BUILD_SCRIPT }} onnxruntime-${{ github.event.inputs.onnx_tags }}

      - name: Build package
        run: |
          cd onnxruntime-${{ github.event.inputs.onnx_tags }}
          if ("${{matrix.win_ver }}" -eq "2019")
          {
            powershell .\${{ env.BUILD_SCRIPT }} -VsArch ${{ matrix.arch }} -VsVer v142 -VsSDK ${{ github.event.inputs.windows_SDK_ver }} -VsCRT ${{ matrix.crt }} 
            cd ..
            if ("${{ matrix.crt }}" -eq "md")
            {
              cp -r onnxruntime-${{ github.event.inputs.onnx_tags }}/build-${{ matrix.arch }}-v142-${{ matrix.crt }}/Release/install ${{ env.SHARED_PKG_NAME }}
              7z a ${{ env.SHARED_PKG_NAME }}.7z ${{ env.SHARED_PKG_NAME }}
              rm ${{ env.SHARED_PKG_NAME }} -r -fo
            }
            else #if ("${{ matrix.crt }}" -eq "mt")
            {
              cp -r onnxruntime-${{ github.event.inputs.onnx_tags }}/build-${{ matrix.arch }}-v142-${{ matrix.crt }}/Release/install-static ${{ env.STATIC_PKG_NAME }}
              7z a ${{ env.STATIC_PKG_NAME }}.7z ${{ env.STATIC_PKG_NAME }}
              rm ${{ env.STATIC_PKG_NAME }} -r -fo
            }
          }
          else
          {
            powershell .\${{ env.BUILD_SCRIPT }} -VsArch ${{ matrix.arch }} -VsVer v143 -VsSDK ${{ github.event.inputs.windows_SDK_ver }} -VsCRT ${{ matrix.crt }} 
            cd ..
            if ("${{ matrix.crt }}" -eq "md")
            {
              cp -r onnxruntime-${{ github.event.inputs.onnx_tags }}/build-${{ matrix.arch }}-v143-${{ matrix.crt }}/Release/install ${{ env.SHARED_PKG_NAME }}
              7z a ${{ env.SHARED_PKG_NAME }}.7z ${{ env.SHARED_PKG_NAME }}
              rm ${{ env.SHARED_PKG_NAME }} -r -fo
            }
            else #if ("${{ matrix.crt }}" -eq "mt")
            {
              cp -r onnxruntime-${{ github.event.inputs.onnx_tags }}/build-${{ matrix.arch }}-v143-${{ matrix.crt }}/Release/install-static ${{ env.STATIC_PKG_NAME }}
              7z a ${{ env.STATIC_PKG_NAME }}.7z ${{ env.STATIC_PKG_NAME }}
              rm ${{ env.STATIC_PKG_NAME }} -r -fo
            }
          }

      - name: upload shared lib
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SHARED_PKG_NAME }}
          path: ${{ env.SHARED_PKG_NAME }}.7z
          if-no-files-found: ignore

      - name: upload static lib
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.STATIC_PKG_NAME }}
          path: ${{ env.STATIC_PKG_NAME }}.7z
          if-no-files-found: ignore
  Release:
    needs: [ Build ]
    runs-on: ubuntu-latest
    steps:
      - name: Generate Changelog
        run: |
          echo -e '${{ github.event.inputs.onnx_tags }}' > release.md

      # 下载artifact
      - name: download
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # 查看artifact
      - name: list artifact
        run: |
          tree artifacts

      # 创建release 上传release
      - name: upload-windows
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.event.inputs.onnx_tags }}
          draft: true
          prerelease: false
          bodyFile: release.md
          artifacts: artifacts/*/*.7z
          allowUpdates: true
          artifactContentType: application/x-7z-compressed
          token: ${{ secrets.GITHUB_TOKEN }}
